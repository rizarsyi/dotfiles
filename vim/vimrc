set nocompatible
set rtp+=~/.vim/bundle/neobundle.vim/

call neobundle#rc(expand('~/.vimbundles'))
set rtp+=~/.vim/bundle/vwilight/

" Bundles
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'ervandew/supertab'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'othree/html5.vim'
NeoBundle 'rhowardiv/nginx-vim-syntax'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'godlygeek/tabular'
NeoBundle 'sjl/clam.vim'
NeoBundle 'chrisbra/Recover.vim'
NeoBundle 'tpope/vim-haml'
NeoBundle 'bling/vim-airline'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'mitsuhiko/vim-jinja'
NeoBundle 'mitsuhiko/vim-rst'
NeoBundle 'honza/dockerfile.vim'
NeoBundle 'vim-scripts/javacomplete'
NeoBundle 'hsanson/vim-android'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'rking/ag.vim'
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'kana/vim-scratch'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'fatih/vim-go'
NeoBundle 'wting/rust.vim'
NeoBundle 'chase/vim-ansible-yaml'
NeoBundle '29decibel/vim-stringify'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'mxw/vim-jsx'
NeoBundle 'tpope/vim-fireplace'
NeoBundle 'vim-scripts/po.vim'
NeoBundle 'cespare/vim-toml'
NeoBundle 'saltstack/salt-vim'

filetype plugin indent on
syntax on

" Theming
if $TMUX != '' && $TERM != 'screen-256color'
    set term=screen-256color
endif

set t_Co=256
color vwilight

let mapleader = ','

" display options
set title
set visualbell
set number
set ruler
set list
set listchars=tab:⇥\ ,trail:·,extends:⋯,precedes:⋯,eol:¬
set encoding=utf-8
set wrap
set linebreak
set showcmd
set laststatus=2
set showbreak=↪

" formatting options
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set autoindent
set smartindent
set shiftround
set noeol
set backspace=indent,eol,start

" buffer options
set hidden
set autoread
set autowrite

" search options
set hlsearch
set incsearch
set ignorecase
set smartcase

set nospell

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.pyc,*.git,*.hg,*.svn,*.DS_STORE,*.sw?,*.py[co],*.orig

" backup options
set noswapfile
set nobackup
set nowritebackup

" highlight JSON as JavaScript
au BufRead,BufNewFile *.json set ft=javascript

" highlight Jinja2 template as Jinja
au BufRead,BufNewFile *.jinja2 set ft=jinja

" ensure Go and Makefile always use tabs instead of spaces
au FileType make,go  setl noexpandtab

" set 2-spaces indentation for Ruby, Coffeescript, and YAML files
au FileType coffee,yaml,vim,ruby  setl softtabstop=2 shiftwidth=2 tabstop=2

" Folding
set foldmethod=indent
set nofoldenable

" Use ag instead of grep
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" trailing whitespace
autocmd BufWritePre * :silent! %s/\s\+$//e
autocmd BufWritePre * :silent! %s#\($\n\)\+\%$##

" Enable omni completion. (Ctrl-X Ctrl-O)
autocmd FileType html,markdown setl ofu=htmlcomplete#CompleteTags
autocmd FileType javascript setl ofu=javascriptcomplete#CompleteJS
autocmd FileType python setl ofu=pythoncomplete#Complete
autocmd FileType css set ofu=csscomplete#CompleteCSS
autocmd FileType java set ofu=javacomplete#Complete

" use syntax complete if nothing else available
if has('autocmd') && exists('+omnifunc')
  autocmd Filetype *
    \ if &omnifunc == "" |
    \   setl ofu=syntaxcomplete#Complete |
    \ endif
endif
set completeopt=longest,menu

" Highlight the overflow text
" http://stackoverflow.com/questions/235439/vim-80-column-layout-concerns
highlight OverLength ctermbg=red ctermfg=white
au FileType python match OverLength /\%81v.\+/

" Toggles paste mode (http://is.gd/FxlJAH)
set pastetoggle=<F9>

" Turn off search highlighting
nmap <leader>/ :nohl<CR>

" --- SuperTab
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabNoCompleteAfter = ['^', '\s', ',']
let g:SuperTabContextDiscoverDiscovery = ['&completefunc:<c-x><c-u>', '&omnifunc:<c-x><c-o>']

" --- Autopairs
let g:AutoPairsShortcutFastWrap = '<C-f>'
let g:AutoPairsMapCR = 0

" --- Rainbow Parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" --- Airline
let g:airline_theme='dark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:ttimeoutlen=50

" --- Emmet
let g:user_emmet_leader_key='<C-e>'

" --- Clam
let g:clam_winpos='botright'

" --- Pycomplexity
nnoremap <silent> <F6> :Complexity<CR>

" --- Commentary
autocmd FileType nginx set commentstring=#\ %s
autocmd FileType dockerfile set commentstring=#\ %s

" --- Ultisnips
let g:ultisnips_python_style = 'sphinx'
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsDontReverseSearchPath="1"

" --- TagBar
" toggle TagBar with F4
nnoremap <silent> <F4> :TagbarToggle<CR>
" set focus to TagBar when opening it
let g:tagbar_autofocus = 1

" --- NERDTree
nnoremap <F2> :NERDTreeToggle<CR>
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif
let NERDTreeIgnore = ['\.pyc$', '\.egg-info$', '^dist$', '^build$', '^__pycache__$']
let NERDTreeHightlightCursorline=1

" --- Gundo
nnoremap <F3> :GundoToggle<CR>

" --- Ag
nnoremap <leader>\ :Ag<SPACE>
let g:agprg="ag --nogroup --nocolor --column"

" -- ctrlP
if executable("ag")
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" --- Syntastic
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_auto_jump = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_javascript_checkers = ['jsxhint']

" --- indentLine
let g:indentLine_color_term = 235
let g:indentLine_char = '¦'

" Faster panes navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" vim-go
let g:go_bin_path = expand('~/.gobin')
let g:go_fmt_command = "goimports"
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Rust
au FileType rust match OverLength /\%99v.\+/

" ReactJS
let g:jsx_ext_required = 1

" Last thing to do with
NeoBundleCheck
